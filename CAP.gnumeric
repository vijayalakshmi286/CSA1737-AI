from itertools import permutations

def is_valid_solution(mapping):
    # Extract values based on the mapping
    send = int("".join(str(mapping[c]) for c in "SEND"))
    more = int("".join(str(mapping[c]) for c in "MORE"))
    money = int("".join(str(mapping[c]) for c in "MONEY"))
    return send + more == money

def solve_cryptarithmetic():
    letters = "SENDMOREMONEY"
    unique_letters = set(letters)
    
    if len(unique_letters) > 10:
        return "Too many unique letters for digits (0-9)."
    
    for perm in permutations(range(10), len(unique_letters)):
        mapping = dict(zip(unique_letters, perm))
        
        # Ensure no leading zeros for the words SEND, MORE, MONEY
        if (mapping['S'] == 0 or mapping['M'] == 0 or mapping['M'] == 0):
            continue
        
        if is_valid_solution(mapping):
            return mapping
    
    return "No solution found."

def print_solution(mapping):
    if isinstance(mapping, dict):
        print("Solution:")
        print(f"SEND = {int(''.join(str(mapping[c]) for c in 'SEND'))}")
        print(f"MORE = {int(''.join(str(mapping[c]) for c in 'MORE'))}")
        print(f"MONEY = {int(''.join(str(mapping[c]) for c in 'MONEY'))}")
    else:
        print(mapping)

# Example usage
solution = solve_cryptarithmetic()
print_solution(solution)
