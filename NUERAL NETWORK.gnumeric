import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

# Load dataset
data = load_iris()
X = data.data
y = data.target

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create and train the Feedforward Neural Network
# Hidden layer sizes can be adjusted as needed (e.g., (10, 10) for two hidden layers with 10 neurons each)
nn = MLPClassifier(hidden_layer_sizes=(5,), max_iter=1000, random_state=42)
nn.fit(X_train, y_train)

# Make predictions
y_pred = nn.predict(X_test)

# Evaluate the neural network
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Visualizing the decision boundary (optional, works well with 2D data)
def plot_decision_boundary(X, y, model):
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02), np.arange(y_min, y_max, 0.02))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    plt.contourf(xx, yy, Z, alpha=0.3)
    plt.scatter(X[:, 0], X[:, 1], c=y, edgecolor='k', marker='o')
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.title('Decision Boundary')
    plt.show()

# Optional: Plot decision boundary (useful for 2D data)
# Note: The Iris dataset has 4 features, so this will work if you select only 2 features for visualization
X_2D = X[:, :2]  # Select the first 2 features for 2D visualization
X_train_2D, X_test_2D, y_train_2D, y_test_2D = train_test_split(X_2D, y, test_size=0.3, random_state=42)
nn_2D = MLPClassifier(hidden_layer_sizes=(5,), max_iter=1000, random_state=42)
nn_2D.fit(X_train_2D, y_train_2D)
plot_decision_boundary(X_test_2D, y_test_2D, nn_2D)
